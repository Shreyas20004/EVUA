"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = _default;
exports.matchDefinedProperties = void 0;
var _fMatches = require("f-matches");
var _matchObjectDefinePropertyCall = require("./matchObjectDefinePropertyCall.js");
var matchObjectDefinePropertiesCallOnPrototype = (0, _fMatches.matches)({
  type: 'ExpressionStatement',
  expression: {
    type: 'CallExpression',
    callee: {
      type: 'MemberExpression',
      computed: false,
      object: {
        type: 'Identifier',
        name: 'Object'
      },
      property: {
        type: 'Identifier',
        name: 'defineProperties'
      }
    },
    arguments: [{
      type: 'MemberExpression',
      computed: false,
      object: {
        type: 'Identifier',
        name: (0, _fMatches.extractAny)('className')
      },
      property: {
        type: 'Identifier',
        name: 'prototype'
      }
    }, {
      type: 'ObjectExpression',
      properties: (0, _fMatches.extractAny)('methods')
    }]
  }
});
var matchObjectDefinePropertiesCall = (0, _fMatches.matches)({
  type: 'ExpressionStatement',
  expression: {
    type: 'CallExpression',
    callee: {
      type: 'MemberExpression',
      computed: false,
      object: {
        type: 'Identifier',
        name: 'Object'
      },
      property: {
        type: 'Identifier',
        name: 'defineProperties'
      }
    },
    arguments: [{
      type: 'Identifier',
      name: (0, _fMatches.extractAny)('className')
    }, {
      type: 'ObjectExpression',
      properties: (0, _fMatches.extractAny)('methods')
    }]
  }
});
var matchDefinedProperties = (0, _fMatches.matches)({
  type: 'Property',
  key: {
    type: 'Identifier',
    name: (0, _fMatches.extractAny)('methodName')
  },
  computed: false,
  value: {
    type: 'ObjectExpression',
    properties: (0, _fMatches.extractAny)('properties')
  }
});

/**
 * Matches: Object.defineProperties(<className>.prototype, {
 *              <methodName>: {
 *                <kind>: <methodNode>,
 *              }
 *              ...
 *          })
 *
 * When node matches returns an array of objects with the extracted fields for each method:
 *
 * [{
 *   - className
 *   - methodName
 *   - descriptors:
 *       - propertyNode
 *       - methodNode
 *       - kind
 * }]
 *
 * @param  {Object} node
 * @return {Object[] | undefined}
 */
exports.matchDefinedProperties = matchDefinedProperties;
function _default(node) {
  var _matchObjectDefinePro = matchObjectDefinePropertiesCallOnPrototype(node),
    className = _matchObjectDefinePro.className,
    methods = _matchObjectDefinePro.methods;
  var isStatic = false;
  if (!className) {
    var _matchObjectDefinePro2 = matchObjectDefinePropertiesCall(node);
    className = _matchObjectDefinePro2.className;
    methods = _matchObjectDefinePro2.methods;
    isStatic = true;
  }
  if (className) {
    return methods.map(function (methodNode) {
      var _matchDefinedProperti = matchDefinedProperties(methodNode),
        methodName = _matchDefinedProperti.methodName,
        properties = _matchDefinedProperti.properties;
      return {
        className: className,
        methodName: methodName,
        methodNode: methodNode,
        descriptors: properties.filter(_matchObjectDefinePropertyCall.isAccessorDescriptor).map(function (prop) {
          return {
            propertyNode: prop,
            methodNode: prop.value,
            kind: prop.key.name
          };
        }),
        "static": isStatic
      };
    });
  }
}